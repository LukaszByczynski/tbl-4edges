inline void InBinarySerializer::Pool::setData(DataPtr<u8> data)
{
	m_data = data;
}

inline DataPtr<u8> InBinarySerializer::Pool::data() const
{
	return m_data;
}

inline void InBinarySerializer::Pool::setAllocator(Allocator* allocator)
{
	m_allocator = allocator;
}

inline Allocator* InBinarySerializer::Pool::allocator() const
{
	return m_allocator;
}

inline void InBinarySerializer::Pool::setHandle(u32 handle)
{
	m_handle = handle;
}

inline u32 InBinarySerializer::Pool::handle() const
{
	return m_handle;
}

inline void InBinarySerializer::Pool::setSize(u32 size)
{
	m_size = size;
}

inline u32 InBinarySerializer::Pool::size() const
{
	return m_size;
}

inline void InBinarySerializer::Object::setFactory(SerializableFactory* factory)
{
	m_factory = factory;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline SerializableFactory* InBinarySerializer::Object::factory() const
{
	return m_factory;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void InBinarySerializer::Object::setOffset(u32 offset)
{
	m_offset = offset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Object::offset() const
{
	return m_offset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void InBinarySerializer::Object::setObject(Serializable* object)
{
	m_object = object;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Serializable* InBinarySerializer::Object::object() const
{
	return m_object;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void InBinarySerializer::Block::setData(u8* data)
{
	m_data = data;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u8* InBinarySerializer::Block::data() const
{
	return m_data;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void InBinarySerializer::Block::setOffset(u32 offset)
{
	m_offset = offset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::offset() const
{
	return m_offset;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void InBinarySerializer::Block::setPool(u32 pool)
{
	m_pool = pool;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::pool() const
{
	return m_pool;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline SerializableStructure* InBinarySerializer::Block::structure() const
{
	return m_structure;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::owner() const
{
	return m_owner;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::allocator() const
{
	return m_allocator;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::align() const
{
	return m_align;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 InBinarySerializer::Block::size() const
{
	return m_size;
}

