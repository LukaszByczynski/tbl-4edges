///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2004 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_Log_h
#define zenic_Log_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../Io/Stream.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Log : public Stream
{
public:

	Log();
	virtual ~Log();

private:

	virtual int read(void* buffer, int size);
	virtual int write(const void* buffer, int size);
	virtual int seek(SeekMode mode, int offset);
	virtual bool flush();
	virtual int tell() const;

	enum { BufferSize = 511 };

	int m_offset;
	c8 m_buffer[ BufferSize+1 ];
};

extern Log logOut;

}

#define ZENIC_ERROR(a) zenic::logOut << __FILE__ <<  "(" << __LINE__ << ")" << " [ERROR] " << a << zenic::endl
#define ZENIC_WARNING(a) zenic::logOut << __FILE__ <<  "(" << __LINE__ << ")" << " [WARNING] " << a << zenic::endl
#define ZENIC_INFO(a) zenic::logOut << __FILE__ <<  "(" << __LINE__ << ")" << " [INFO] " << a << zenic::endl
#define ZENIC_VERIFY(exp,a) if (!(exp)) ZENIC_WARNING(a)

#endif //zenic_log_h
