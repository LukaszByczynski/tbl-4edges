inline Vector4::Vector4()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4::Vector4(f32 x, f32 y, f32 z, f32 w) : x(x), y(y), z(z), w(w)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4::Vector4(const Vector4& v) : x(v.x), y(v.y), z(v.z), w(v.w)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4& Vector4::operator = (const Vector4& v)
{
	x = v.x;
	y = v.y;
	z = v.z;
	w = v.w;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4 Vector4::operator + (const Vector4& v) const
{
	return Vector4(x + v.x, y + v.y, z + v.z, w + v.w);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4 Vector4::operator - (const Vector4& v) const
{
	return Vector4(x - v.x, y - v.y, z - v.z, w - v.w);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4 Vector4::operator - (void) const
{
	return Vector4(-x, -y, -z, -w);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4& Vector4::operator += (const Vector4& v)
{
	x += v.x;
	y += v.y;
	z += v.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4& Vector4::operator -= (const Vector4& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector4 Vector4::normalize() const
{
	float denom = f32(1.0) / sqrt(dot(*this));
	return Vector4(x * denom, y * denom, z * denom, w * denom);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Vector4 Vector4::cross(const Vector4& v1, const Vector4& v2) const
{
	f32 a = (x * v1.y) - (y * v1.x);
	f32 b = (x * v1.z) - (z * v1.x);
	f32 c = (x * v1.w) - (w * v1.x);
	f32 d = (y * v1.z) - (z * v1.y);
	f32 e = (y * v1.w) - (w * v1.y);
	f32 f = (z * v1.w) - (w * v1.z);

	return Vector4(
			(v2.y * f) - (v2.z * e) + (v2.w * d),
			(v2.x * f) + (v2.z * c) - (v2.w * b),
			(v2.x * e) - (v2.y * c) + (v2.w * a),
			(v2.x * d) + (v2.y * b) - (v2.z * a)
			);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline f32 Vector4::dot(const Vector4& v) const
{
	return (x * v.x) + (y * v.y) + (z * v.z) + (w * v.w);
}
