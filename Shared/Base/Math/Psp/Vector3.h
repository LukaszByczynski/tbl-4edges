///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2004 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_psp_Vector3_h
#define zenic_psp_Vector3_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../Types.h"

#include <math.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forwards
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	class Serializer;
	class Log;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Vector3
{
public:

	Vector3();
	Vector3(const Vector3& v);
	Vector3(f32 x, f32 y, f32 z);

	void serialize(Serializer& s, const char* name = 0);

	Vector3& operator = (const Vector3& v);

	Vector3 operator + (const Vector3& v) const;
	Vector3 operator - (const Vector3& v) const;
	Vector3 operator * (float f) const;
	Vector3 operator - (void) const;

	Vector3& operator += (const Vector3& v);
	Vector3& operator -= (const Vector3& v);
	Vector3& operator *= (float f);

	Vector3 normalize() const;
	Vector3 cross(const Vector3& v) const;
	f32 dot(const Vector3& v) const;

	f32 x,y,z;
};

Log& operator<<(Log& stream, const Vector3& v);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Vector3.inl"

}

#endif //zenic_psp_Vector3_h
