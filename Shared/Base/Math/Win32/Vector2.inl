///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2::Vector2()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2::Vector2(const Vector2& v) : x(v.x), y(v.y)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2::Vector2(f32 x, f32 y) : x(x), y(y)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2& Vector2::operator = (const Vector2& v)
{
	x = v.x;
	y = v.y;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Vector2::operator == (const Vector2& v) const
{
	return (x == v.x && y == v.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2 Vector2::operator + (const Vector2& v) const
{
	return Vector2(x + v.x, y + v.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2 Vector2::operator - (const Vector2& v) const
{
	return Vector2(x - v.x, y - v.y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2 Vector2::operator - (void) const
{
	return Vector2(-x, -y);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2& Vector2::operator += (const Vector2& v)
{
	x += v.x;
	y += v.y;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector2& Vector2::operator -= (const Vector2& v)
{
	x -= v.x;
	y -= v.y;

	return *this;
}

