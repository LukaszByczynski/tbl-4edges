///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2004 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Base/Types.h>
#include "Trig.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Code
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define M_PI 3.1415926535897932384626433832795f
#define SIN_ITERATOR 20

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float sin(float v)
{
	float res,w;
	int t;
	float fac;
	int i=int((v)/(2.0f*M_PI));
	v-=i*2.0f*M_PI;

	fac=1.0f;
	res=0.0f;
	w=v;
	for(t=1;t<SIN_ITERATOR;)
	{
		res+=fac*w;
		w*=v*v;
		t++;
		fac/=t;
		t++;
		fac/=t;

		res-=fac*w;
		w*=v*v;
		t++;
		fac/=t;
		t++;
		fac/=t;
	}
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float cos(float v)
{
	float res,w;
	int t;
	float fac;
	int i=int((v)/(2.0f*M_PI));
	v-=i*2.0f*M_PI;

	fac=1.0f;
	res=0.0f;
	w=1.0f;
	for(t=0;t<SIN_ITERATOR;)
	{
		res+=fac*w;
		w*=v*v;
		t++;
		fac/=t;
		t++;
		fac/=t;

		res-=fac*w;
		w*=v*v;
		t++;
		fac/=t;
		t++;
		fac/=t;
	}
	return res;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

float sqrt(float v)
{
	float b;

	asm volatile(
	"sqrt.s %0,%1\n"
	: "=f" (b)
	: "f" (v));

	return b;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

