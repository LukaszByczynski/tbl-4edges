///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3::Vector3()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3::Vector3(const Vector3& v) : x(v.x), y(v.y), z(v.z)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3::Vector3(f32 x, f32 y, f32 z) : x(x), y(y), z(z)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3& Vector3::operator = (const Vector3& v)
{
	x = v.x;
	y = v.y;
	z = v.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::operator + (const Vector3& v) const
{
	return Vector3(x + v.x, y + v.y, z + v.z);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::operator - (const Vector3& v) const
{
	return Vector3(x - v.x, y - v.y, z - v.z);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::operator * (float f) const
{
	return Vector3(x * f, y * f, z * f);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::operator - (void) const
{
	return Vector3(-x, -y, -z);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3& Vector3::operator += (const Vector3& v)
{
	x += v.x;
	y += v.y;
	z += v.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3& Vector3::operator -= (const Vector3& v)
{
	x -= v.x;
	y -= v.y;
	z -= v.z;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3& Vector3::operator *= (float f)
{
	x *= f;
	y *= f;
	z *= f;

	return *this;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::normalize() const
{
	float denom = f32(1.0)/zenic::sqrt(dot(*this));	

	return Vector3(x * denom, y * denom, z * denom);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline f32 Vector3::length() const
{
	return zenic::sqrt(dot(*this));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Vector3 Vector3::cross(const Vector3& v) const
{
	return Vector3(
					(y * v.z) - (z * v.y),
					(z * v.x) - (x * v.z),
					(x * v.y) - (y * v.x)
				);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline f32 Vector3::dot(const Vector3& v) const
{
	return(x * v.x) + (y * v.y) + (z * v.z);
}
