///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ps2emu_dma_h
#define ps2emu_dma_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <vector>
#include <string>
#include <fstream>
#include "datatypes.h"
#include "sub.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace ps2emu
{
	class Vif1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace ps2emu
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Dma
{
public:
	Dma();

	bool processTag(Vif1* vif1);
	void processAll(Vif1* vif1);

	//bool openFile(const std::string& filename);
	void openMemory(const char* buffer, u32 size = 0);

private:

	enum
	{
		Timeout = 10000
	};

	enum SourceChainTag
	{
		Cnt = 1,
		Next,
		Ref,
		Call = 5,
		Ret,
		End
	};

	const u32* m_buffer;
	const u32* m_workingBuffer;

	u32 m_bufferSize;

	bool m_fileMode:1;
	bool m_trace:1;
	bool m_ended:1;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Dma::openMemory(const char* buffer, u32 size)
{
	m_buffer = m_workingBuffer = reinterpret_cast<const u32*>(buffer);
	m_bufferSize = size;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

#endif
