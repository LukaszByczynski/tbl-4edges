///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_DotModel_h
#define zenic_ps2_DotModel_h

#include <Shared/Base/Math/Vector3.h>
#include <Shared/Graphics/Scene/Model.h>
#include <Shared/Base/Serialize/SerializableFactory.h>
#include <Shared/Base/Serialize/SerializableStructure.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class DotModel : public Model
{
	ZENIC_SERIALIZABLE_FACTORY;

public:

	DotModel();
	//virtual ~DotModel();

	void serialize(Serializer& s);

	const Vector3& scale() const;
	void setScale(const Vector3& scale);

	const DataPtr<s16>& points() const;
	void setPoints(const DataPtr<s16>& point);

private:

	DataPtr<s16> m_points;
	Vector3 m_scale;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Vector3& DotModel::scale() const
{
	return m_scale;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void DotModel::setScale(const Vector3& scale)
{
	m_scale = scale;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void DotModel::setPoints(const DataPtr<s16>& points)
{
	m_points = points;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
	}
}

#endif


