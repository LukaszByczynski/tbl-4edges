inline Texture::Texture() : m_mipMaps(0)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::setMipMaps(u32 mipMaps)
{
	m_mipMaps = mipMaps;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::mipMaps() const
{
	return m_mipMaps;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::setPalette(DataPtr<u8> palette)
{
	m_palette = palette;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline DataPtr<u8>& Texture::palette()
{
	return m_palette;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline DataPtr<u8> Texture::palette() const
{
	return m_palette;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::setData(uint map, DataPtr<u8> data)
{
	m_data[map] = data;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline DataPtr<u8> Texture::data(uint map) const
{
	return m_data[map];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Texture::Parameters::Parameters() : m_bufferWidth(0), m_psm(0), m_clutPsm(0), m_width(0), m_height(0)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Texture::Parameters::Parameters(u32 bufferWidth, u32 psm, u32 clutPsm, u32 width, u32 height) : 
	m_bufferWidth(bufferWidth), 
	m_psm(psm), 
	m_clutPsm(clutPsm), 
	m_width(width), 
	m_height(height)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::Parameters::setBufferWidth(u32 bufferWidth)
{
	m_bufferWidth = bufferWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::Parameters::bufferWidth() const
{
	return m_bufferWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::Parameters::setPsm(u32 psm)
{
	m_psm = psm;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::Parameters::psm() const
{
	return m_psm;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::Parameters::setClutPsm(u32 clutPsm)
{
	m_clutPsm = clutPsm;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::Parameters::clutPsm() const
{
	return m_clutPsm;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::Parameters::setWidth(u32 width)
{
	m_width = width;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::Parameters::width() const
{
	return m_width;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::Parameters::setHeight(u32 height)
{
	m_height = height;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u32 Texture::Parameters::height() const
{
	return m_height;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::setUploadParameters(const Parameters& upload)
{
	m_uploadParameters = upload;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Texture::setDisplayParameters(const Parameters& display)
{
	m_displayParameters = display;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Texture::Parameters& Texture::uploadParameters() const
{
	return m_uploadParameters;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Texture::Parameters& Texture::displayParameters() const
{
	return m_displayParameters;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Array<Model*>& Texture::models()
{
	return m_models;
}

