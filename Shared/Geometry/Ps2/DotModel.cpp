///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "DotModel.h"
#include <Shared/Base/Serialize/SerializableVersion.h>
#include <Shared/Base/Serialize/Serializer.h>
#include <Shared/Base/Io/Log.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ZENIC_CREATE_SERIALIZABLE_FACTORY(DotModel, SERIALIZABLE_ID('P','S','2',' '), SERIALIZABLE_ID('D','O','T','M'));

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DotModel::DotModel() : 
	m_scale(1.0f, 1.0f, 1.0f)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//DotModel::~DotModel()
//{
//}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DotModel::serialize(Serializer& s)
{
	SerializableVersion version(1, factory());

	s << version;

	s.descriptor(SERIALIZER_NAME("m_points")) << m_points;
	
	s.descriptor(SERIALIZER_NAME("m_scale.x")) << m_scale.x;
	s.descriptor(SERIALIZER_NAME("m_scale.y")) << m_scale.y;
	s.descriptor(SERIALIZER_NAME("m_scale.z")) << m_scale.z;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}



