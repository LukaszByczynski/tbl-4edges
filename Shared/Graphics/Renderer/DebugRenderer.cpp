///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "DebugRenderer.h"
#include <Shared/Base/Storage/String.h>
#include <Shared/Base/Math/Vector3.h>
#include <Shared/Base/Math/Matrix4.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Vector3 DebugRenderer::m_cubeCoords[] =
{
	Vector3(-1.0f,  1.0f,  1.0f),
	Vector3( 1.0f,  1.0f,  1.0f),
	Vector3( 1.0f, -1.0f,  1.0f),
	Vector3(-1.0f, -1.0f,  1.0f),
	Vector3(-1.0f,  1.0f, -1.0f),
	Vector3( 1.0f,  1.0f, -1.0f),
	Vector3( 1.0f, -1.0f, -1.0f),
	Vector3(-1.0f, -1.0f, -1.0f)
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::text(const zenic::String& dispText, float x, float y, const Color32& color)
{
	text(static_cast<const char*>(dispText.str()), x, y, color); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::quad(const Vector3& p0, const Vector3& p1, const Vector3& p2, const Vector3& p3, 
						 const Color32& color)
{
	triangle(p0, p1, p2, color);
	triangle(p0, p2, p3, color);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::thickLine(const Vector3& /*p0*/, const Vector3& /*p2*/, float /*thickness*/, const Color32& /*color*/)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::cube(const Vector3& pos, const Matrix4& rot, float sideLength, const Color32& color)
{
	Vector3 coords[8];

	for (uint i = 0; i < 8; ++i)
		coords[i] = rot.apply((m_cubeCoords[i] * sideLength)) + pos; 

	quad(coords[1], coords[0], coords[3], coords[2], Color32(255, 0, 0, 0));
	quad(coords[4], coords[5], coords[6], coords[7], Color32(0, 255, 0, 0));
	quad(coords[0], coords[1], coords[5], coords[4], Color32(0, 0, 255, 0));
	quad(coords[7], coords[6], coords[2], coords[3], Color32(255, 255, 0, 0));
	quad(coords[5], coords[1], coords[2], coords[6], Color32(255, 0, 255, 0));
	quad(coords[0], coords[4], coords[7], coords[3], color);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::axisCross(const Vector3& pos, float size)
{
	line(pos, Vector3(pos.x + size, pos.y, pos.z), Color32(255, 0, 0, 0)); 
	line(pos, Vector3(pos.x, pos.y + size, pos.z), Color32(0, 255, 0, 0)); 
	line(pos, Vector3(pos.x, pos.y, pos.z + size), Color32(0, 0, 255, 0)); 
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::box(const Vector3& /*pos*/, const Matrix4& /*rot*/, const Vector3& /*sideLength*/, const Color32& /*color*/)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::sphere(const Vector3& /*pos*/, const Matrix4& /*rot*/, float /*radius*/, const Color32& /*color*/)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::sphere(const Vector3& /*pos*/, float /*radius*/, const Color32& /*color*/)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void DebugRenderer::circle(const Vector3& /*pos*/, const Vector3& /*plane*/, float /*radius*/, float /*thickness*/, const Color32& /*color*/)
{

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
