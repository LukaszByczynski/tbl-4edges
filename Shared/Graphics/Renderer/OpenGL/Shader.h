///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_opengl_Shader_h
#define zenic_opengl_Shader_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Base/Serialize/Serializable.h>
#include <Shared/Base/Serialize/SerializableFactory.h>
#include <Shared/Graphics/Renderer/OpenGL/ShaderNode.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace opengl
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Shader : public Serializable
{
	ZENIC_SERIALIZABLE_FACTORY;
public:

	Shader();
	virtual void serialize(Serializer& s);

	void execute();

	inline void addNode(ShaderNode* node);
	void addInternal(Serializer& s);
	
private:

	DataPtr<ShaderNode*> m_shaderNodes;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Shader::addNode(ShaderNode* node)
{
	uint count = m_shaderNodes.count();
	m_shaderNodes.resize(count + 1);
	m_shaderNodes[count] = node;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

