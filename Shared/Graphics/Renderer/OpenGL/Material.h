///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_opengl_Material_h
#define zenic_opengl_Material_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Graphics/Renderer/Material.h>
#include <Shared/Graphics/Renderer/OpenGL/Shader.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace opengl
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Material : public zenic::Material
{
	ZENIC_SERIALIZABLE_FACTORY;


public:
	Material();

	void addShader(Shader* shader);

	void execute();

	virtual void serialize(Serializer& s);
	virtual void addInternal(Serializer& s);

	DataPtr<Shader*> m_shaders;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::addShader(Shader* shader)
{
	uint count = m_shaders.count();
	m_shaders.resize(count + 1);
	m_shaders[count] = shader;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
