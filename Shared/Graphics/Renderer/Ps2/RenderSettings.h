///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_RenderSettings_h
#define zenic_ps2_RenderSettings_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Base/Types.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class RenderSettings
{
public:

	RenderSettings(u16 screenWidth = 512, u16 screenHeight = 448, u16 textureWidth = 9, u16 textureHeight = 9, 
				   u16 screenFbw = 8, u16 buffer0 = 0, u16 buffer1 = 112, u16 zbuffer = 224, 
				   u16 tempBuffer0 = 336, u16 tempBuffer1 = 280);

	u16 screenWidth() const;
	u16 screenHeight() const;

	u16 textureWidth() const;
	u16 textureHeight() const;
	
	u16 screenFbw() const;

	u16 buffer0() const;
	u16 buffer1() const;
	u16 zbuffer() const;

	u16 tempBuffer0() const;
	u16 tempBuffer1() const;

private:

	u16 m_screenWidth;
	u16 m_screenHeight;

	u16 m_textureWidth;
	u16 m_textureHeight;

	u16 m_screenFbw;

	u16 m_buffer0;
	u16 m_buffer1;
	u16 m_zbuffer;

	u16 m_tempBuffer0;
	u16 m_tempBuffer1;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline RenderSettings::RenderSettings(u16 screenWidth, u16 screenHeight, u16 textureWidth, u16 textureHeight, 
									  u16 screenFbw, u16 buffer0, u16 buffer1, u16 zbuffer, 
									  u16 tempBuffer0, u16 tempBuffer1) :
	m_screenWidth(screenWidth),
	m_screenHeight(screenHeight),
	m_textureWidth(textureWidth),
	m_textureHeight(textureHeight),
	m_screenFbw(screenFbw),
	m_buffer0(buffer0),
	m_buffer1(buffer1),
	m_zbuffer(zbuffer),
	m_tempBuffer0(tempBuffer0),
	m_tempBuffer1(tempBuffer1)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::screenWidth() const
{
	return m_screenWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::screenHeight() const
{
	return m_screenHeight;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline	u16 RenderSettings::textureWidth() const
{
	return m_textureWidth;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline	u16 RenderSettings::textureHeight() const
{
	return m_textureHeight;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline	u16 RenderSettings::screenFbw() const
{
	return m_screenFbw;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::buffer0() const
{
	return m_buffer0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::buffer1() const
{
	return m_buffer1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::zbuffer() const
{
	return m_zbuffer;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::tempBuffer0() const
{
	return m_tempBuffer0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 RenderSettings::tempBuffer1() const
{
	return m_tempBuffer1;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif


