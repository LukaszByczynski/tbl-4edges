/*

Copyright (c) 2004-2006 Jesper Svennevid, Daniel Collin

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

#ifndef zenic_ps2_Material_h
#define zenic_ps2_Material_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Graphics/Renderer/Material.h>
#include <Shared/Geometry/Ps2/Texture.h>
#include <Shared/Base/Math/Color32.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
		class Dma;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Material : public zenic::Material
{
	ZENIC_SERIALIZABLE_FACTORY;

public:

	Material();
	~Material();
	void execute(Dma& dmaChain);
	void serialize(Serializer& s);

	void setBaseTexture(Texture& texture);
	const Texture& baseTexture() const;

	bool glow() const;
	void setGlow(bool glow);

	bool additive() const;
	void setAdditive(bool additive);

	Color32 color() const;
    void setColor(Color32 color);

	u16 transValue() const;
	void setTransValue(u16 transValue);

private:

	Texture m_texture;
	Color32 m_color;
	bool m_glow;
	bool m_additive;
	u16 m_transValue;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::setBaseTexture(Texture& texture)
{
	m_texture = texture;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Texture& Material::baseTexture() const
{
	return m_texture;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Material::glow() const
{
	return m_glow;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::setGlow(bool glow)
{
	m_glow = glow;
}
 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline bool Material::additive() const
{
	return m_additive;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::setAdditive(bool additive)
{
	m_additive = additive;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Color32 Material::color() const
{
	return m_color;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::setColor(Color32 color)
{
	m_color = color;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline u16 Material::transValue() const
{
	return m_transValue;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Material::setTransValue(u16 transValue)
{
	m_transValue = transValue;
}
 
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

