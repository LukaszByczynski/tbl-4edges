///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Material.h"
#include <Shared/Base/Serialize/Serializer.h>
#include <Shared/Base/Serialize/SerializableVersion.h>
#include <Shared/Geometry/Ps2/Texture.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ZENIC_CREATE_SERIALIZABLE_FACTORY(Material, SERIALIZABLE_ID('P','S','2',' '), SERIALIZABLE_ID('M','A','T','R'))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Material::Material() : 
	m_color(0, 0, 0, 0), 
	m_glow(false), 
	m_additive(false), 
	m_transValue(0)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Material::~Material()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Material::serialize(Serializer& s)
{
	SerializableVersion version(2, factory());

	s << version;
	m_texture.serialize(s);

	s.descriptor(SERIALIZER_NAME("m_color.r")) << m_color.r;
	s.descriptor(SERIALIZER_NAME("m_color.g")) << m_color.g;
	s.descriptor(SERIALIZER_NAME("m_color.b")) << m_color.b;
	s.descriptor(SERIALIZER_NAME("m_color.a")) << m_color.a;

	s.descriptor(SERIALIZER_NAME("m_glow")) << m_glow;
	s.descriptor(SERIALIZER_NAME("m_additive")) << m_additive;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Material::execute(Dma& /*dmaChain*/)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

