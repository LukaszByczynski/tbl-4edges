inline void TextureSystem::setVifChannel(Dma& vifChannel)
{
	m_vifChannel = vifChannel;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Dma& TextureSystem::vifChannel() const
{
	ZENIC_ASSERT(m_vifChannel);
	return *m_vifChannel;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void TextureSystem::setGifChannel(Dma& gifChannel)
{
	m_gifChannel = gifChannel;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Dma& TextureSystem::gifChannel() const
{
	ZENIC_ASSERT(m_gifChannel);
	return *m_gifChannel;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Texture* TextureSystem::texture() const
{
	return m_texture;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline TextureSystem::Reference(uint tagAddress,Texture* texture) : m_tagAddress(tagAddress), m_texture(texture)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline TextureSystem::Reference& TextureSystem::Reference::operator = (const Reference& reference)
{
	m_tagAddress = tagAddress;
	m_texture = texture;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void* TextureSystem::Reference::tagAddress() const
{
	return m_tagAddress;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Texture* TextureSystem::Reference::texture() const
{
	return m_texture;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline uint TextureSystem::log2(uint value)
{
	uint c = 0;
	while (value > 0)
	{
		c++;
		value >>= 1;
	}	

	return c;
}
