///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Camera.h"

#include <Shared/Base/Serialize/SerializableVersion.h>
#include <Shared/Base/Serialize/Serializer.h>

#include <Shared/Base/Io/Log.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ZENIC_CREATE_SERIALIZABLE_FACTORY(Camera, SERIALIZABLE_ID('Z','N','I','C'), SERIALIZABLE_ID('C','A','M',' '))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Camera::Camera()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Camera::~Camera()
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Camera::update(float time)
{
	Node::update(time);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Camera::isType(Type type)
{
	if (type == CameraType)
		return true;

	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Camera::serialize(Serializer& s)
{
	SerializableVersion version(1, factory());

	s << version;

	Node::serialize(s);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}


