///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "SceneInfo.h"

#include <Shared/Base/Serialize/SerializableVersion.h>
#include <Shared/Base/Serialize/Serializer.h>
#include <Shared/Base/Io/Log.h>

#include <Shared/Graphics/Scene/Camera.h>
#include <Shared/Graphics/Scene/Node.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ZENIC_CREATE_SERIALIZABLE_FACTORY(SceneInfo, SERIALIZABLE_ID('Z','N','I','C'), SERIALIZABLE_ID('S','N','F','O'))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SceneInfo::SceneInfo() :
	m_primaryCamera(0),
	m_rootNode(0),
	m_length(0.0f)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneInfo::serialize(Serializer& s)
{
	SerializableVersion version(1, factory());

	s << version;

	s.descriptor("m_primaryCamera") << m_primaryCamera;
	s.descriptor("m_rootNode") << m_rootNode;
	s.descriptor("m_length") << m_length;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SceneInfo::switchToCamera(uint cameraId)
{
	ZENIC_ASSERT(cameraId < m_cameras.count());
	Camera* camera = static_cast<Camera*>(m_cameras.buffer()[cameraId]);
	setPrimaryCamera(camera);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

