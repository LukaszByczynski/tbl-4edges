///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// includes
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "BoneArray.h"

#include <Shared/Base/Serialize/Serializer.h>
#include <Shared/Base/Serialize/SerializableVersion.h>
#include "Node.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// class
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

ZENIC_CREATE_SERIALIZABLE_FACTORY(BoneArray,SERIALIZABLE_ID('Z','N','I','C'),SERIALIZABLE_ID('B','A','R','R'))
ZENIC_CREATE_SERIALIZABLE_STRUCTURE(BoneArray,Bone,SERIALIZABLE_ID('B','O','N','E'))

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BoneArray::~BoneArray()
{
	m_bones.free();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BoneArray::serialize( Serializer& s )
{
	SerializableVersion version(1,factory());

	s << version;

	s.beginStructure(m_bones,SERIALIZER_NAME("m_bones"));
	for (uint i = 0; i < m_bones.count(); ++i)
		m_bones[i].serialize(s);
	s.endStructure();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void BoneArray::Bone::serialize(Serializer& s)
{
	s.descriptor(SERIALIZER_NAME("m_target")) << m_target;
	m_name.serialize(s, SERIALIZER_NAME("m_name"));
	m_bound.serialize(s, SERIALIZER_NAME("m_bound") );
	m_transform.serialize(s, SERIALIZER_NAME("m_transform"));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
