///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_GlenzNode_h
#define zenic_GlenzNode_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Node.h"
#include <Shared/Base/Math/Vector3.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	class GlenzNode;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class GlenzNode : public Node
{
	ZENIC_SERIALIZABLE_FACTORY;

public:

	enum
	{
		MaxCollectedNodes = 300
	};

	GlenzNode();
	virtual ~GlenzNode();
	
	static void resetCollected();
	static uint collectedCount();
	static const GlenzNode** collectedNodes();

	void update(float time);
	void serialize(Serializer& s);

	Vector3 m_angles;
	Vector3 m_anglesSpeed;

	static uint s_collectedCount;
	static GlenzNode* s_collectedNodes[MaxCollectedNodes];
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void GlenzNode::resetCollected()
{
	s_collectedCount = 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline uint GlenzNode::collectedCount()
{
	return s_collectedCount;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const GlenzNode** GlenzNode::collectedNodes()
{
	return reinterpret_cast<const GlenzNode**>(&s_collectedNodes);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

#endif



