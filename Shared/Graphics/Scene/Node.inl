///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node::Node() : 
	m_parent(0), 
	m_firstChild(0), 
	m_lastChild(0), 
	m_prevSibling(0), 
	m_nextSibling(0), 
	m_controllers(0),
	m_scale(1.0f, 1.0f, 1.0f)
{
	m_worldTransform = Matrix4::identity();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setTransform(const Matrix4& transform)
{
	m_transform = transform;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Matrix4& Node::transform() const
{
	return m_transform;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::updateWorldTransform()
{
	if( m_parent )
		m_worldTransform = m_transform * m_parent->worldTransform();
	else
		m_worldTransform = m_transform;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Matrix4& Node::worldTransform() const
{
	return m_worldTransform;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Bound& Node::bound() const
{
	return m_bound;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::parent() const
{
	return m_parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::firstChild() const
{
	return m_firstChild;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::lastChild() const
{
	return m_lastChild;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::prevSibling() const
{
	return m_prevSibling;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::nextSibling() const
{
	return m_nextSibling;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setControllers(Controller* controllers)
{
	m_controllers = controllers;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Controller* Node::controllers() const
{
	return m_controllers;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline Node* Node::traverse(Node* root, Node* current)
{
	if (current->firstChild())
		return current->firstChild();

	do
	{
		if (root == current)
			return 0;

		if (current->nextSibling())
			return current->nextSibling();

		current = current->parent();
	}
	while (current);

	return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setWorldTransform(const Matrix4& worldTransform)
{
	m_worldTransform = worldTransform;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setBound(const Bound& bound)
{
	m_bound = bound;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setParent(Node* parent)
{
	m_parent = parent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setFirstChild(Node* firstChild)
{
	m_firstChild = firstChild;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setLastChild(Node* lastChild)
{
	m_lastChild = lastChild;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setPrevSibling(Node* prevSibling)
{
	m_prevSibling = prevSibling;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setNextSibling(Node* nextSibling)
{
	m_nextSibling = nextSibling;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const Vector3& Node::scale() const
{
	return m_scale;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline void Node::setScale(const Vector3& scale)
{
	m_scale = scale;
}

