///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2003-2005 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Bound.h"
#include <Shared/Base/Serialize/Serializer.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Bound::serialize(Serializer& s, const char* name)
{
	s.beginGroup(name, SERIALIZER_NAME("zenic::Bound"));
	m_position.serialize(s, SERIALIZER_NAME("m_position"));
	s.descriptor("m_radius") << m_radius;
	s.endGroup();
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Bound Bound::merge(const Bound& bound) const
{
/*
	Vector3 direction = (bound.position()-position()).normalize();
	Vector3 extent1 = position() - (direction * radius());
	Vector3 extent2 = bound.position() + (direction * bound.radius());

	Vector3 radius = (extent2-extent1) * 0.5f;
	return Bound(extent1 + radius, sqrt(radius.dot(radius)));
*/
	return bound;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
