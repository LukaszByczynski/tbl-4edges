///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_FftStream_h
#define zenic_ps2_FftStream_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Base/Types.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
		class Dma;
		class Renderer;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class FftStream
{

public:

	FftStream();
	static FftStream& instance();

	void create();
	void update(Renderer& renderer, Dma& dmaChain, bool visualize = false);

	void setTime(float time);

	const u8* kickData() const;
	const u8* hihatData() const;
	const u8* bassData() const;
	const u8* speachData() const;

private:

	u8* loadData(const char* filename);

	u8* m_kickData;
	u8* m_hihatData;
	u8* m_bassData;
	u8* m_speachData;

	uint m_offset;

	static FftStream* s_instance;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const u8* FftStream::kickData() const
{
	if (!m_kickData)
		return 0;

	return static_cast<const u8*>(&m_kickData[m_offset]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const u8* FftStream::hihatData() const
{
	if (!m_hihatData)
		return 0;

	return static_cast<const u8*>(&m_hihatData[m_offset]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const u8* FftStream::bassData() const
{
	if (!m_bassData)
		return 0;

	return static_cast<const u8*>(&m_bassData[m_offset]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline const u8* FftStream::speachData() const
{
	if (!m_speachData)
		return 0;

	return static_cast<const u8*>(&m_speachData[m_offset]);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif




