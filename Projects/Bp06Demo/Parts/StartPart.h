///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_StartPart_h
#define zenic_ps2_StartPart_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Part.h"
#include <Shared/Base/Types.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
		class Texture;
		class Dma;
		class Renderer;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StartPart : public Part
{

public:

	StartPart(Renderer& renderer, Dma& dmaChain);
	virtual ~StartPart() {}

	bool create();
	void reset();
	void update(float time, float deltaTime, SyncPoints::Part* syncPoints = 0);

private:

	enum
	{
		FadeUp,
		Wait,
		FadeDown
	};

	void showImage(float fade);

	Texture* m_logo;
	Texture* m_psLogo;
	Renderer& m_renderer;
	Dma& m_dmaChain;
	float m_time;
	u32 m_state;
	uint m_syncPos;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline StartPart::StartPart(Renderer& renderer, Dma& dmaChain) :
	m_renderer(renderer),
	m_dmaChain(dmaChain),
	m_time(0.0f),
	m_state(FadeUp),
	m_syncPos(0)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif


