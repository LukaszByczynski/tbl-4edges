///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_LogoPart_h
#define zenic_ps2_LogoPart_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Part.h"
#include <Shared/Base/Types.h>
#include <Shared/Graphics/Renderer/Ps2/Shaders/PostEffect/FadeToFog.h>
#include <Shared/Graphics/Renderer/Ps2/RenderSettings.h>
#include <Shared/Graphics/Scene/Camera.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	class Camera;

	namespace ps2
	{
		class Texture;
		class Dma;
		class Renderer;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class LogoPart : public Part
{

public:

	enum
	{
		LogoX = 64,
		LogoY = 64,
		LogoSize = LogoX * LogoY
	};

	LogoPart(Renderer& renderer, Dma& dmaChain);
	virtual ~LogoPart() {}

	bool create();
	void reset() {};
	bool destroy();
	void update(float time, float deltaTime, SyncPoints::Part* syncPoints = 0);

private:

	struct Cube
	{
		Vector3 pos;
		Vector3 direction;
		Vector3 rot;
		Vector3 rotSpeed;
		float speed;
		float gravity;
	};

	u8 m_logo[LogoSize];
	zenic::Camera m_sceneCamera;
	Renderer& m_renderer;
	Dma& m_dmaChain;
	Cube* m_cubes;
	uint m_cubeCount;
	float m_zPos;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline LogoPart::LogoPart(Renderer& renderer, Dma& dmaChain) :
	m_renderer(renderer),
	m_dmaChain(dmaChain),
	m_cubes(0),
	m_cubeCount(0),
	m_zPos(420.0f)
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif




