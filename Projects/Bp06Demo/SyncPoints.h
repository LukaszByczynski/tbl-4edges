///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement and may not be copied or disclosed except in
// accordance with the terms of that agreement.
//
// Copyright (c) 2006 Jesper Svennevid, Daniel Collin.
// All Rights Reserved.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef zenic_ps2_SyncPoints_h
#define zenic_ps2_SyncPoints_h

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Shared/Base/Types.h>
#include <Shared/Base/Storage/Array.h>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	class MusicStream;

	namespace ps2
	{
		class Pad;
		class Texture;
		class Dma;
		class Renderer;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace zenic
{
	namespace ps2
	{
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class SyncPoints
{

public:

	enum Type
	{
		Custom,	// one float value for custom types
		CameraChange
	};

	struct CustomType
	{
		float value;
	};

	struct SwitchCamera
	{
		float time;
		u32 cameraId;
	};

	struct SyncPoint
	{
		Type type;
		u8 data[256];	// Can be any kind of data, depends on type.
	};

	struct Part
	{
		~Part() { syncPoints.clear(); }

		uint id;
		float startTime;

		Array<SyncPoint> syncPoints;	
	};

	SyncPoints();
	void reloadFile();
	float update(Pad& pad, MusicStream& stream, float time);
	float update(float time);
	float partStartTime();
	uint partId();

private:

	void parseFile(char* buffer);

	Array<Part*> m_parts;

	int m_currentPart;
	uint m_currentSyncPoint;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif



